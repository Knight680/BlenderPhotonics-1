function blendermmc(paramfile, meshfile)
%
% blendermmc(paramfile, meshfile)
%
% Launching an MMCLAB simulation and save results to a JMesh file
%
% author: Qianqian Fang (q.fang at neu.edu)
%         Yuxuan Zhang (zhang.yuxuan1 at northeastern.edu)
%
% input:
%	 paramfile: the JSON file contains simulation parameters configured in Blender
%	 meshfile:  the tetrahedral mesh file generated by BlenderPhotonics in previous step
%
% output:
%	 a single JSON file mmcoutput.json contains a 1D/2D array subfield of "logflux" 
%        is saved in the BP's temporary folder
%
% license: GPLv3 or later, see LICENSE.txt for details
%
% reference:
%
% @article{BlenderPhotonics2022,
%   author = {Yuxuan Zhang and Qianqian Fang},
%   title = {{BlenderPhotonics: an integrated open-source software environment for three-dimensional meshing and photon simulations in complex tissues}},
%   volume = {27},
%   journal = {Journal of Biomedical Optics},
%   number = {8},
%   publisher = {SPIE},
%   pages = {1 -- 23},
%   year = {2022},
%   doi = {10.1117/1.JBO.27.8.083014},
%   URL = {https://doi.org/10.1117/1.JBO.27.8.083014}
% }
%
% -- this function is part of BlenderPhotonics (http://mcx.space/bp)
%

param=loadjson(paramfile);
meshdata=load(meshfile);

%% Pre-processing data
prop = param.prop;
Q=num2cell(param.cfg.srcdir);
[w,x,y,z] = Q{:};
R = [1-2*y^2-2*z^2,2*x*y-2*z*w,2*x*z+2*y*w;
    2*x*y+2*z*w,1-2*x^2-2*z^2,2*y*z-2*x*w;
    2*x*z-2*y*w,2*y*z+2*x*w,1-2*x^2-2*y^2];
dir = R*[0;0;-1];
scale = [meshdata.scale(1,1), meshdata.scale(2,2), meshdata.scale(3,3)];
move = [meshdata.scale(1,4), meshdata.scale(2,4), meshdata.scale(3,4)];

%% cfg build
cfg.nphoton= double(param.cfg.nphoton);
cfg.srctype=param.cfg.srctype;
cfg.srcpos=(param.cfg.srcpos-move)./scale;
cfg.srcdir= dir';
cfg.srcparam1=param.cfg.srcparam1./[scale, 1];
cfg.srcparam2=param.cfg.srcparam2./[scale, 1];
cfg.prop= prop;
cfg.vol = meshdata.image;
cfg.tstart=0;
cfg.tend=param.cfg.tend;
cfg.tstep=param.cfg.tstep;
cfg.isreflect=double(param.cfg.isreflect);
cfg.isnormalized=param.cfg.isnormalized;
cfg.gpuid=param.cfg.gpuid;
cfg.unitinmm = param.cfg.unitinmm*meshdata.scale(1,1);
cfg.outputtype=param.cfg.outputtype;
cfg.debuglevel=param.cfg.debuglevel;
cfg.method=param.cfg.method;

save('-v7',bpmwpath('mmccfg.mat'),'cfg');

%% run the simulation

flux=mcxlab(cfg);

%% Post-processing simulation result
scale = meshdata.scale;
flux.data += 1;
fluxlog = log10(abs(flux.data));

save('-v7',bpmwpath('Mcx_result.mat'),'fluxlog','scale');

